package utils;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.RandomAccessFile;
import java.nio.channels.FileChannel;
import java.nio.channels.FileLock;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import jxl.Sheet;
import jxl.Workbook;
import jxl.write.Label;
import jxl.write.WritableHyperlink;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;

public class UtilityFunctions {
	
	/// <summary>
	/// Author            :  Rohit Vyas
	/// Description       : Checking Weather a Process is Running Or Not
	/// </summary>
	
	public static boolean isProcessRunning(String serviceName) throws Exception 
	{
		Process p = Runtime.getRuntime().exec(System.getenv("windir") + "\\system32\\" + "tasklist.exe");
		BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));
		String line;
		while ((line = reader.readLine()) != null) {
			if (line.contains(serviceName)) {
				return true;
			}
		}    
		return false;
	}
	
	
	/// <summary>
	/// Author            :  Rohit Vyas
	/// Description       : Setting Default Values to Current Directory and Environment File Path
	/// </summary>
	public static void SetDefaultValues()
	{
		PropertiesAndConstants.CurrentDirectory= System.getProperty("user.dir").substring(0, 6);
		System.out.println("PropertiesAndConstants.CurrentDirectory"+PropertiesAndConstants.CurrentDirectory);
		PropertiesAndConstants.EvnFilePath = PropertiesAndConstants.CurrentDirectory+"/rohitv/Documents/"+"iprogrammerAutomation/Config/Env.xml";
		
		System.out.println("PropertiesAndConstants.EvnFilePath"+PropertiesAndConstants.EvnFilePath);
	}
	
	
	/// <summary>
	/// Author            :  Rohit Vyas
	/// Description       : Checking Weather a String is Null or Not
	/// </summary>
	
	public static boolean IsNullOrEmpty(String StringTocheck)
	{
		if (StringTocheck == null||StringTocheck.trim().length() == 0)
			return true;
		else
			return false;
	}

	
	/// <summary>
	/// Author            :  Rohit Vyas
	/// Description       : Checking Weather a String is Null or Having White Spaces
	/// </summary>
	public static boolean IsNullOrWhiteSpace(String StringTocheck)
	{
		
		return IsNullOrEmpty(StringTocheck);
	}
	
	
	/// <summary>
	/// Author            :  Rohit Vyas
	/// Description       : Checking Weather a File is Open or Not
	/// </summary>
	public static boolean isFileOpened(File file) throws IOException

	{
			boolean res = false;
			
			FileChannel channel = new RandomAccessFile(file, "rw").getChannel();
			FileLock lock = channel.lock();
			
			try {
			      //The file is not already opened 
			      lock = channel.tryLock();
			   } 
			 catch (Exception e)
		        {   
		            e.printStackTrace();   
		            res = true;
		            
		        }  

			return res;
		
	}
	
	
	/// <summary>
	/// Author            :  Rohit Vyas
	/// Description       : Closing Firefox Browser
	/// </summary>
	
	public static void CloseFireFoxBrowsers() throws IOException, Exception
	{
		while (isProcessRunning("chromedriver.exe")||isProcessRunning("firefox.exe"))
			//while (isProcessRunning("chromedriver.exe")||isProcessRunning("chrome.exe"))
			{
				if(isProcessRunning("chromedriver.exe")==true)
				{
					System.out.println("Killing----- Chrome driver");
					Runtime.getRuntime().exec("taskkill /F /IM chromedriver.exe");
				}
				if(isProcessRunning("firefox.exe")==true)
				{
					System.out.println("Killing----- mozila");
					Runtime.getRuntime().exec("taskkill /IM firefox.exe");
				}
				if(isProcessRunning("chrome.exe")==true)
				{
					System.out.println("Killing----- Chrome");
					Runtime.getRuntime().exec("taskkill /IM chrome.exe");
				}
			}//End of while Loop

	}
	/// <summary>
	/// Author            :  Rohit Vyas
	/// Description       : Executing the Script
	/// </summary>
	
	public static void ExecuteScript(String Argument) throws ScriptException
	{
		ScriptEngineManager factory = new ScriptEngineManager();
		ScriptEngine engine = factory.getEngineByName("JavaScript");
		engine.eval(Argument);
	}

	public static void CaptureExecutionResults(Workbook testScript,Sheet testScriptSheet, int rowID, boolean result, String resultsToExcel) throws IOException, WriteException
	{
        WritableWorkbook testscriptcopy = null;
        WritableSheet testscriptsheetcopy = null;
        testscriptcopy=Workbook.createWorkbook(new File("/Users/rohitv/Documents/iprogrammerAutomation/result"+".xls"),testScript);
		testscriptsheetcopy=testscriptcopy.getSheet(0);
		PropertiesAndConstants.isCreated=true;
        
		testscriptsheetcopy.addCell(new Label(5, rowID, ""));
		testscriptsheetcopy.addCell(new Label(6, rowID, ""));
		testscriptsheetcopy.addCell(new Label(7, rowID, ""));
		if (resultsToExcel.toUpperCase() == "FAIL")
		{
			if (!result)
			{
				testscriptsheetcopy.addCell(new Label(5, rowID, ""));
				testscriptsheetcopy.addCell(new Label(6, rowID, "FAIL"));
				testscriptsheetcopy.addCell(new Label(6, rowID, PropertiesAndConstants.ResultString));
				testscriptsheetcopy.addCell(new Label(7, rowID, ""));

				if (!UtilityFunctions.IsNullOrEmpty(PropertiesAndConstants.TempScreenshotPath))
				{
					File screenshotFile = new File(PropertiesAndConstants.TempScreenshotPath);	
					WritableHyperlink ExcelHyperLink = new WritableHyperlink(7, rowID, screenshotFile, "ScreenShot");
					testscriptsheetcopy.addHyperlink(ExcelHyperLink);
				}

				if (!UtilityFunctions.IsNullOrWhiteSpace(PropertiesAndConstants.TempPageSourcePath))
				{
					File screenshotFile = new File(PropertiesAndConstants.TempPageSourcePath);
					WritableHyperlink ExcelHyperLink = new WritableHyperlink(7, rowID, screenshotFile, "PageSource");
					testscriptsheetcopy.addHyperlink(ExcelHyperLink);
				}
				PropertiesAndConstants.FailStepsPerScriptCounter++;
			}
			testscriptcopy.write();
		}
		if (!UtilityFunctions.IsNullOrEmpty(resultsToExcel))
		{
			if (!result)
			{
				testscriptsheetcopy.addCell(new Label(5,rowID,""));
				testscriptsheetcopy.addCell(new Label(5,rowID,"FAIL"));
				testscriptsheetcopy.addCell(new Label(7,rowID,""));
				if (!UtilityFunctions.IsNullOrEmpty(PropertiesAndConstants.TempScreenshotPath))
				{
					File ScreenshotFile = new File(PropertiesAndConstants.TempScreenshotPath);
					WritableHyperlink ExcelHyperLink = new WritableHyperlink(7, rowID, ScreenshotFile, "ScreenShot");
					testscriptsheetcopy.addHyperlink(ExcelHyperLink);
				}
				if (!UtilityFunctions.IsNullOrWhiteSpace(PropertiesAndConstants.TempPageSourcePath))
				{
					File ScreenshotFile = new File(PropertiesAndConstants.TempPageSourcePath);
					WritableHyperlink ExcelHyperLink = new WritableHyperlink(7, rowID, ScreenshotFile, "ScreenShot");
					testscriptsheetcopy.addHyperlink(ExcelHyperLink);
				}
				PropertiesAndConstants.FailStepsPerScriptCounter++;
			}
			if (result && !PropertiesAndConstants.IsStepSkip)
			{ 
				testscriptsheetcopy.addCell(new Label(5,rowID,"PASS"));
				testscriptcopy.write();
			}

			if (result && PropertiesAndConstants.IsStepSkip)
			{
				testscriptsheetcopy.addCell(new Label(5,rowID,"SKIP"));
			}
			testscriptsheetcopy.addCell(new Label(7,rowID,""));
		   
		}
		
	    testscriptcopy.close();
		PropertiesAndConstants.ScreenShotFullPath = "";
	}	

}//End of class UtilityFunctions 
